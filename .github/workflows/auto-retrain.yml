name: Auto-Retrain Fraud Detection Model

# Permisos necesarios para que GitHub Actions pueda hacer push y crear tags
permissions:
  contents: write
  actions: read

on:
  push:
    paths:
      - 'data/X_train.csv'
      - 'data/y_train.csv'
      - 'data/fraud_data_processed.csv'
  
  workflow_dispatch:
    inputs:
      force_retrain:
        description: 'Force retrain even if threshold not met'
        required: false
        default: 'false'
      threshold:
        description: 'Minimum new rows needed for retraining'
        required: false
        default: '2'

env:
  PYTHON_VERSION: '3.10'
  RETRAIN_THRESHOLD: ${{ github.event.inputs.threshold || '2' }}
  FORCE_RETRAIN: ${{ github.event.inputs.force_retrain || 'false' }}

jobs:
  data-monitor:
    name: Monitor Data Changes
    runs-on: ubuntu-latest
    outputs:
      needs_retrain: ${{ steps.check.outputs.needs_retrain }}
      new_rows: ${{ steps.check.outputs.new_rows }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 2
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scikit-learn
    
    - name: Check for data changes
      id: check
      run: |
        echo "Verificando cambios en datos de entrenamiento..."
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        
        if [ "${{ env.FORCE_RETRAIN }}" = "true" ]; then
          echo "FORCE_RETRAIN activado - saltando verificación"
          echo "needs_retrain=true" >> $GITHUB_OUTPUT
          echo "new_rows=999999" >> $GITHUB_OUTPUT
        else
          python src/data_monitor.py --threshold ${{ env.RETRAIN_THRESHOLD }} --action check
        fi

  retrain-model:
    name: Retrain Model
    runs-on: ubuntu-latest
    needs: data-monitor
    if: needs.data-monitor.outputs.needs_retrain == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Backup current model
      run: |
        timestamp=$(date +"%Y%m%d_%H%M%S")
        backup_dir="models/backup_${timestamp}"
        mkdir -p "$backup_dir"
        
        if [ -f "models/fraud_model.joblib" ]; then
          cp models/fraud_model.joblib "$backup_dir/"
          echo "Modelo anterior respaldado en $backup_dir"
        fi
        
        if [ -f "models/model_metadata.json" ]; then
          cp models/model_metadata.json "$backup_dir/"
        fi
        
        echo "BACKUP_DIR=$backup_dir" >> $GITHUB_ENV
    
    - name: Train new model
      id: train
      run: |
        echo "Iniciando reentrenamiento del modelo..."
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        
        echo "PYTHONPATH: $PYTHONPATH"
        echo "Verificando archivos de datos..."
        ls -la data/
        
        echo "Ejecutando python src/model.py..."
        if python src/model.py > train_output.log 2>&1; then
          echo "=== ENTRENAMIENTO EXITOSO ==="
          echo "train_success=true" >> $GITHUB_OUTPUT
          
          auc=$(grep "AUC:" train_output.log | tail -1 | grep -oE '[0-9]+\.[0-9]+' || echo "0.0")
          echo "new_auc=$auc" >> $GITHUB_OUTPUT
          echo "Nuevo AUC: $auc"
          
          echo "=== LOG OUTPUT ==="
          cat train_output.log
          echo "=================="
        else
          echo "=== ERROR EN ENTRENAMIENTO ==="
          echo "train_success=false" >> $GITHUB_OUTPUT
          
          echo "=== ERROR LOG ==="
          cat train_output.log
          echo "================="
          
          echo "Verificando Python y dependencias..."
          python --version
          pip list | grep -E "(pandas|scikit|numpy|joblib)"
          
          exit 1
        fi
    
    - name: Validate new model
      id: validate
      if: steps.train.outputs.train_success == 'true'
      run: |
        echo "Validando nuevo modelo..."
        
        if [ -f "$BACKUP_DIR/model_metadata.json" ]; then
          old_auc=$(python -c "import json; print(json.load(open('$BACKUP_DIR/model_metadata.json'))['test_auc'])" 2>/dev/null || echo "0.0")
        else
          old_auc="0.0"
        fi
        
        new_auc="${{ steps.train.outputs.new_auc }}"
        min_auc=0.85
        
        echo "AUC anterior: $old_auc"
        echo "AUC nuevo: $new_auc"
        echo "AUC mínimo: $min_auc"
        
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        OLD_AUC=$old_auc NEW_AUC=$new_auc MIN_AUC=$min_auc python src/validate_model.py
    
    - name: Deploy new model or rollback
      run: |
        if [ "${{ steps.validate.outputs.model_valid }}" = "true" ]; then
          echo "Desplegando nuevo modelo..."
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python src/data_monitor.py --action mark-completed
          
          timestamp=$(date +"%Y%m%d_%H%M%S")
          model_version="model-v${timestamp}"
          echo "Creando tag: $model_version"
          echo "MODEL_VERSION=$model_version" >> $GITHUB_ENV
        else
          echo "Restaurando modelo anterior..."
          if [ -f "$BACKUP_DIR/fraud_model.joblib" ]; then
            cp "$BACKUP_DIR/fraud_model.joblib" models/
            cp "$BACKUP_DIR/model_metadata.json" models/ 2>/dev/null || true
            echo "Modelo anterior restaurado"
          fi
          exit 1
        fi
    
    - name: Run model tests
      if: steps.validate.outputs.model_valid == 'true'
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python src/test_model.py
    
    - name: Commit new model
      if: steps.validate.outputs.model_valid == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add models/fraud_model.joblib models/model_metadata.json data_state.json
        
        commit_msg="Auto-retrain model $MODEL_VERSION - New rows: ${{ needs.data-monitor.outputs.new_rows }} - AUC: ${{ steps.train.outputs.new_auc }}"
        
        git commit -m "$commit_msg" || echo "No changes to commit"
        git tag -a "$MODEL_VERSION" -m "Automated model retrain"
        git push origin HEAD
        git push origin --tags
        echo "Nuevo modelo committeado y tagged como $MODEL_VERSION"

  build-docker-image:
    name: Build Updated Docker Image
    runs-on: ubuntu-latest
    needs: retrain-model
    if: needs.retrain-model.result == 'success'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Get model version
      run: |
        # Recuperar la versión del modelo del commit más reciente
        MODEL_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
        echo "MODEL_VERSION=$MODEL_VERSION" >> $GITHUB_ENV
        echo "Building Docker image with model version: $MODEL_VERSION"
    
    - name: Build Docker image
      run: |
        echo "Construyendo imagen Docker con el nuevo modelo..."
        docker build -t fraud-detection:$MODEL_VERSION .
        docker tag fraud-detection:$MODEL_VERSION fraud-detection:latest
        
        echo "Docker image built successfully:"
        echo "- fraud-detection:$MODEL_VERSION"
        echo "- fraud-detection:latest"
    
    - name: Save Docker image info
      run: |
        echo "## Nueva Imagen Docker Disponible" >> $GITHUB_STEP_SUMMARY
        echo "| Información | Valor |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Imagen | fraud-detection:$MODEL_VERSION |" >> $GITHUB_STEP_SUMMARY
        echo "| Tag Latest | fraud-detection:latest |" >> $GITHUB_STEP_SUMMARY
        echo "| Comando Run | \`docker run -p 8000:8000 fraud-detection:latest\` |" >> $GITHUB_STEP_SUMMARY
        
        # Opcional: Guardar información para webhook o deployment
        echo '{"image":"fraud-detection:'$MODEL_VERSION'","tag":"'$MODEL_VERSION'"}' > docker-image-info.json
        
    # Notificar al contenedor running para recargar el modelo
    - name: Notify running containers to reload model
      run: |
        echo "Notificando a contenedores en ejecución para recargar modelo..."
        
        # Si hay un contenedor corriendo localmente, notificarle
        if curl -f http://localhost:8000/health >/dev/null 2>&1; then
          echo "Contenedor local detectado, solicitando recarga del modelo..."
          curl -X POST http://localhost:8000/reload-model \
            -H "Content-Type: application/json" || echo "No se pudo notificar al contenedor local"
        fi
        
        # Opcional: Notificar a otros entornos (desarrollo, staging, etc.)
        # Cambiar CONTAINER_ENDPOINTS según tus URLs de deployment
        if [ -n "${{ vars.CONTAINER_ENDPOINTS }}" ]; then
          echo "Notificando a contenedores remotos..."
          IFS=',' read -ra ENDPOINTS <<< "${{ vars.CONTAINER_ENDPOINTS }}"
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Notificando a: $endpoint"
            curl -X POST "$endpoint/reload-model" \
              -H "Content-Type: application/json" \
              --max-time 10 || echo "Error notificando a $endpoint"
          done
        fi
        
        echo "Notificaciones de recarga completadas"

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [data-monitor, retrain-model, build-docker-image]
    if: always()
    
    steps:
    - name: Display workflow results
      run: |
        echo "## Reentrenamiento Automático - Resultados" >> $GITHUB_STEP_SUMMARY
        echo "| Métrica | Valor |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Nuevas filas | ${{ needs.data-monitor.outputs.new_rows || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Necesita reentrenamiento | ${{ needs.data-monitor.outputs.needs_retrain || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Estado Reentrenamiento | ${{ needs.retrain-model.result || 'Saltado' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Estado Docker Build | ${{ needs.build-docker-image.result || 'Saltado' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.retrain-model.result }}" = "success" ]; then
          echo "Reentrenamiento completado exitosamente" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-docker-image.result }}" = "success" ]; then
            echo "Nueva imagen Docker disponible para deployment" >> $GITHUB_STEP_SUMMARY
          fi
        elif [ "${{ needs.data-monitor.outputs.needs_retrain }}" = "false" ]; then
          echo "No se necesitaba reentrenamiento" >> $GITHUB_STEP_SUMMARY
        else
          echo "Reentrenamiento falló" >> $GITHUB_STEP_SUMMARY
        fi