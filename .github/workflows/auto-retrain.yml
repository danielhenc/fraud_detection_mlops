name: ü§ñ Auto-Retrain Fraud Detection Model

# Trigger cuando se hacen cambios a datos de entrenamiento
on:
  push:
    paths:
      - 'data/X_train.csv'
      - 'data/y_train.csv'
      - 'data/fraud_data_processed.csv'
  
  # Tambi√©n permitir trigger manual
  workflow_dispatch:
    inputs:
      force_retrain:
        description: 'Force retrain even if threshold not met'
        required: false
        default: 'false'
      threshold:
        description: 'Minimum new rows needed for retraining'
        required: false
        default: '100'

# Variables de entorno
env:
  PYTHON_VERSION: '3.10'
  RETRAIN_THRESHOLD: ${{ github.event.inputs.threshold || '100' }}
  FORCE_RETRAIN: ${{ github.event.inputs.force_retrain || 'false' }}

jobs:
  # Job 1: Detectar si se necesita reentrenamiento
  data-monitor:
    name: üìä Monitor Data Changes
    runs-on: ubuntu-latest
    outputs:
      needs_retrain: ${{ steps.check.outputs.needs_retrain }}
      new_rows: ${{ steps.check.outputs.new_rows }}
    
    steps:
    - name: üõí Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Necesario para comparar cambios
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scikit-learn
    
    - name: üîç Check for data changes
      id: check
      run: |
        echo "Verificando cambios en datos de entrenamiento..."
        if [ "${{ env.FORCE_RETRAIN }}" = "true" ]; then
          echo "üöÄ FORCE_RETRAIN activado - saltando verificaci√≥n"
          echo "needs_retrain=true" >> $GITHUB_OUTPUT
          echo "new_rows=999999" >> $GITHUB_OUTPUT
        else
          python src/data_monitor.py --threshold ${{ env.RETRAIN_THRESHOLD }} --action check
        fi
    
    - name: üìù Display monitor results
      run: |
        echo "‚úÖ Nuevas filas detectadas: ${{ steps.check.outputs.new_rows }}"
        echo "ü§ñ Necesita reentrenamiento: ${{ steps.check.outputs.needs_retrain }}"

  # Job 2: Reentrenamiento del modelo (solo si es necesario)
  retrain-model:
    name: üéØ Retrain Model
    runs-on: ubuntu-latest
    needs: data-monitor
    if: needs.data-monitor.outputs.needs_retrain == 'true'
    
    steps:
    - name: üõí Checkout repository
      uses: actions/checkout@v4
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: üîÑ Backup current model
      run: |
        timestamp=$(date +"%Y%m%d_%H%M%S")
        backup_dir="models/backup_${timestamp}"
        mkdir -p "$backup_dir"
        
        if [ -f "models/fraud_model.joblib" ]; then
          cp models/fraud_model.joblib "$backup_dir/"
          echo "üì¶ Modelo anterior respaldado en $backup_dir"
        fi
        
        if [ -f "models/model_metadata.json" ]; then
          cp models/model_metadata.json "$backup_dir/"
        fi
        
        echo "BACKUP_DIR=$backup_dir" >> $GITHUB_ENV
    
    - name: üéØ Train new model
      id: train
      run: |
        echo "üöÄ Iniciando reentrenamiento del modelo..."
        python src/model.py > train_output.log 2>&1
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Modelo entrenado exitosamente"
          echo "train_success=true" >> $GITHUB_OUTPUT
          
          # Extraer m√©tricas del output
          auc=$(grep "AUC:" train_output.log | tail -1 | grep -oP '\d+\.\d+' || echo "0.0")
          echo "new_auc=$auc" >> $GITHUB_OUTPUT
          echo "üéØ Nuevo AUC: $auc"
        else
          echo "‚ùå Error en entrenamiento"
          cat train_output.log
          echo "train_success=false" >> $GITHUB_OUTPUT
        fi
    
    - name: üìä Validate new model
      id: validate
      if: steps.train.outputs.train_success == 'true'
      run: |
        echo "üîç Validando nuevo modelo..."
        
        # Cargar m√©tricas del modelo anterior si existe
        if [ -f "$BACKUP_DIR/model_metadata.json" ]; then
          old_auc=$(python -c "import json; print(json.load(open('$BACKUP_DIR/model_metadata.json'))['test_auc'])" 2>/dev/null || echo "0.0")
        else
          old_auc="0.0"
        fi
        
        new_auc="${{ steps.train.outputs.new_auc }}"
        min_auc=0.85  # AUC m√≠nimo aceptable
        
        echo "üìä AUC anterior: $old_auc"
        echo "üìä AUC nuevo: $new_auc" 
        echo "üìä AUC m√≠nimo: $min_auc"
        
        # Validaci√≥n: nuevo AUC debe ser > m√≠nimo y no degradar m√°s del 5%
        python << EOF
import sys
old_auc = float("$old_auc")
new_auc = float("$new_auc") 
min_auc = float("$min_auc")

# Criterios de validaci√≥n
passes_minimum = new_auc >= min_auc
degradation_acceptable = new_auc >= (old_auc * 0.95) if old_auc > 0 else True

print(f"‚úÖ Pasa AUC m√≠nimo ({min_auc}): {passes_minimum}")
print(f"‚úÖ Degradaci√≥n aceptable (<5%): {degradation_acceptable}")

if passes_minimum and degradation_acceptable:
    print("üéâ MODELO VALIDADO - Apto para despliegue")
    with open("$GITHUB_OUTPUT", "a") as f:
        f.write("model_valid=true\n")
    sys.exit(0)
else:
    print("‚ùå MODELO RECHAZADO - No pasa validaci√≥n")
    with open("$GITHUB_OUTPUT", "a") as f:
        f.write("model_valid=false\n")
    sys.exit(1)
EOF
    
    - name: üöÄ Deploy new model or rollback
      run: |
        if [ "${{ steps.validate.outputs.model_valid }}" = "true" ]; then
          echo "üöÄ Desplegando nuevo modelo..."
          
          # Marcar reentrenamiento como completado
          python src/data_monitor.py --action mark-completed
          
          # Crear tag de versi√≥n
          timestamp=$(date +"%Y%m%d_%H%M%S")
          model_version="model-v${timestamp}"
          
          echo "üè∑Ô∏è  Creando tag: $model_version"
          echo "MODEL_VERSION=$model_version" >> $GITHUB_ENV
          
        else
          echo "üîÑ Restaurando modelo anterior..."
          
          if [ -f "$BACKUP_DIR/fraud_model.joblib" ]; then
            cp "$BACKUP_DIR/fraud_model.joblib" models/
            cp "$BACKUP_DIR/model_metadata.json" models/ 2>/dev/null || true
            echo "‚úÖ Modelo anterior restaurado"
          fi
          
          exit 1
        fi
    
    - name: üß™ Run model tests
      if: steps.validate.outputs.model_valid == 'true'
      run: |
        echo "üß™ Ejecutando tests del modelo..."
        
        # Test b√°sico: cargar modelo y hacer predicci√≥n
        python -c "
from src.model import FraudDetectionModel
import pandas as pd
import numpy as np

# Test de carga
model = FraudDetectionModel()
model.load_model()
print('‚úÖ Modelo carga correctamente')

# Test de predicci√≥n
test_data = pd.DataFrame({
    'Time': [0.0], 'V1': [-1.359807], 'V2': [-0.072781], 
    'V4': [2.536347], 'V11': [1.175480], 'Amount': [149.62]
})

pred = model.predict(test_data)
prob = model.predict_proba(test_data)

print(f'‚úÖ Predicci√≥n: {pred[0]}, Probabilidad: {prob[0]:.4f}')
print('üéâ Todos los tests pasaron')
"
    
    - name: üíæ Commit new model
      if: steps.validate.outputs.model_valid == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add models/fraud_model.joblib
        git add models/model_metadata.json
        git add data_state.json
        
        commit_msg="ü§ñ Auto-retrain model $MODEL_VERSION
        
        - New rows processed: ${{ needs.data-monitor.outputs.new_rows }}
        - New AUC: ${{ steps.train.outputs.new_auc }}
        - Backup: $BACKUP_DIR
        "
        
        git commit -m "$commit_msg" || echo "No changes to commit"
        git tag -a "$MODEL_VERSION" -m "Automated model retrain"
        
        # Push changes
        git push origin HEAD
        git push origin --tags
        
        echo "‚úÖ Nuevo modelo committeado y tagged como $MODEL_VERSION"

  # Job 3: Notificaci√≥n de resultados
  notify-results:
    name: üì£ Notify Results
    runs-on: ubuntu-latest
    needs: [data-monitor, retrain-model]
    if: always()  # Siempre ejecutar para notificar resultados
    
    steps:
    - name: üìä Display workflow results
      run: |
        echo "## ü§ñ Reentrenamiento Autom√°tico - Resultados" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| M√©trica | Valor |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Nuevas filas detectadas** | ${{ needs.data-monitor.outputs.new_rows || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Necesitaba reentrenamiento** | ${{ needs.data-monitor.outputs.needs_retrain || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Estado del reentrenamiento** | ${{ needs.retrain-model.result || 'Saltado' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Timestamp** | $(date) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.retrain-model.result }}" = "success" ]; then
          echo "‚úÖ **Reentrenamiento completado exitosamente**" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.data-monitor.outputs.needs_retrain }}" = "false" ]; then
          echo "‚è≥ **No se necesitaba reentrenamiento**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Reentrenamiento fall√≥**" >> $GITHUB_STEP_SUMMARY
        fi